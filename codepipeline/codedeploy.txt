1. Create or Prepare Resources
Before configuring the pipeline:

Create an S3 bucket for storing artifacts.
Set up a CodeBuild project for build and test.
Create a CodeDeploy application and a deployment group.
2. Create a JSON Configuration File
Create a file pipeline.json for the pipeline structure. Below is an example:

json
Copy
Edit
{
  "pipeline": {
    "name": "MyPipeline",
    "roleArn": "arn:aws:iam::<account-id>:role/CodePipelineServiceRole",
    "artifactStore": {
      "type": "S3",
      "location": "your-artifact-bucket-name"
    },
    "stages": [
      {
        "name": "Source",
        "actions": [
          {
            "name": "SourceAction",
            "actionTypeId": {
              "category": "Source",
              "owner": "ThirdParty",
              "provider": "GitHub",
              "version": "1"
            },
            "runOrder": 1,
            "configuration": {
              "Owner": "github-username",
              "Repo": "repository-name",
              "Branch": "main",
              "OAuthToken": "your-github-oauth-token"
            },
            "outputArtifacts": [
              {
                "name": "SourceOutput"
              }
            ],
            "region": "us-east-1"
          }
        ]
      },
      {
        "name": "Build",
        "actions": [
          {
            "name": "BuildAction",
            "actionTypeId": {
              "category": "Build",
              "owner": "AWS",
              "provider": "CodeBuild",
              "version": "1"
            },
            "runOrder": 1,
            "configuration": {
              "ProjectName": "build-project-name"
            },
            "inputArtifacts": [
              {
                "name": "SourceOutput"
              }
            ],
            "outputArtifacts": [
              {
                "name": "BuildOutput"
              }
            ],
            "region": "us-east-1"
          }
        ]
      },
      {
        "name": "Test",
        "actions": [
          {
            "name": "TestAction",
            "actionTypeId": {
              "category": "Build",
              "owner": "AWS",
              "provider": "CodeBuild",
              "version": "1"
            },
            "runOrder": 1,
            "configuration": {
              "ProjectName": "test-project-name"
            },
            "inputArtifacts": [
              {
                "name": "BuildOutput"
              }
            ],
            "outputArtifacts": [],
            "region": "us-east-1"
          }
        ]
      },
      {
        "name": "Deploy",
        "actions": [
          {
            "name": "DeployAction",
            "actionTypeId": {
              "category": "Deploy",
              "owner": "AWS",
              "provider": "CodeDeploy",
              "version": "1"
            },
            "runOrder": 1,
            "configuration": {
              "ApplicationName": "codedeploy-application-name",
              "DeploymentGroupName": "codedeploy-deployment-group-name"
            },
            "inputArtifacts": [
              {
                "name": "BuildOutput"
              }
            ],
            "region": "us-east-1"
          }
        ]
      }
    ]
  }
}
3. Create the Pipeline via AWS CLI
Run the following command to create the pipeline:

bash
Copy
Edit
aws codepipeline create-pipeline --cli-input-json file://pipeline.json
4. Verify and Trigger the Pipeline
Once created:

The pipeline should automatically trigger and run through the stages.
Check the status via the AWS Management Console or CLI:
bash
Copy
Edit
aws codepipeline get-pipeline-state --name MyPipeline
5. Adjust IAM Roles
Ensure the IAM roles (for CodePipeline, CodeBuild, and CodeDeploy) have sufficient permissions:

CodePipeline role should allow access to S3, GitHub, CodeBuild, and CodeDeploy.
CodeBuild roles should allow access to S3 artifacts and other resources.
CodeDeploy roles should allow deploying to the target instances.