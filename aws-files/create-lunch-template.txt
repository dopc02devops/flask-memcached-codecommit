

######################
Launch Template
######################
- Supports advanced features like multiple versions, Spot instances, Elastic IPs, Elastic GPUs, Placement Groups
- Offers features like EBS volume settings (BlockDeviceMappings), advanced instance settings
  (e.g., IAM roles, instance metadata, etc.), and the ability to handle mixed instances (On-Demand + Spot Instances)
- More flexibility when using modern AWS features for scaling and automation

##########################
# version 1, no cloudwatch
##########################
aws ec2 create-launch-template \
    --region eu-west-2 \
    --launch-template-name my-ubuntu-template \
    --version-description "Launch template for EKS" \
    --launch-template-data '{
        "ImageId": "ami-000b29500ea1d73a3",
        "InstanceType": "t2.micro",
        "SecurityGroupIds": ["sg-0eab8786c734218b1"],
        "TagSpecifications": [
            {
                "ResourceType": "instance",
                "Tags": [
                    {"Key": "Environment", "Value": "Dev"}
                ]
            }
        ],
        "UserData": "'"$(echo '#!/bin/bash
# Create a custom user
useradd -m -s /bin/bash kube_user

# Add the public SSH key
mkdir -p /home/kube_user/.ssh
echo \"'"$(cat ~/.ssh/id_kube_user_key.pub)"'\" > /home/kube_user/.ssh/authorized_keys
chown -R kube_user:kube_user /home/kube_user/.ssh
chmod 700 /home/kube_user/.ssh
chmod 600 /home/kube_user/.ssh/authorized_keys

# Add user to sudoers
echo \"kube_user ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers' | base64 -w 0)"'",
        "BlockDeviceMappings": [
            {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                    "VolumeSize": 8,
                    "VolumeType": "gp2"
                }
            }
        ]
    }'

aws ec2 describe-launch-templates --region eu-west-2
create version 2 from version 1

############################
# version 2, with cloudwatch
############################
aws ec2 create-launch-template-version \
    --region eu-west-2 \
    --launch-template-name my-ubuntu-template \
    --source-version 1 \
    --version-description "Version 2: Added CloudWatch log group configuration" \
    --launch-template-data '{
        "ImageId": "ami-000b29500ea1d73a3",
        "InstanceType": "t2.micro",
        "SecurityGroupIds": ["sg-0eab8786c734218b1"],
        "IamInstanceProfile": {
            "Name": "CloudWatchAgentServerRole"
        },
        "TagSpecifications": [
            {
                "ResourceType": "instance",
                "Tags": [
                    {"Key": "Environment", "Value": "Dev"}
                ]
            }
        ],
        "UserData": "'"$(echo '#!/bin/bash
# Update and install dependencies
apt-get update -y
apt-get upgrade -y
apt-get install -y wget curl unzip

# Create a custom user
useradd -m -s /bin/bash kube_user

# Add the public SSH key
mkdir -p /home/kube_user/.ssh
echo \"'"$(cat ~/.ssh/id_kube_user_key.pub)"'\" > /home/kube_user/.ssh/authorized_keys
chown -R kube_user:kube_user /home/kube_user/.ssh
chmod 700 /home/kube_user/.ssh
chmod 600 /home/kube_user/.ssh/authorized_keys

# Add user to sudoers
echo \"kube_user ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers

# Install CloudWatch Agent
wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
dpkg -i amazon-cloudwatch-agent.deb

# Create CloudWatch Agent configuration
cat << EOF > /opt/aws/amazon-cloudwatch-agent/bin/config.json
{
  \"metrics\": {
    \"append_dimensions\": {
      \"InstanceId\": \"${aws:InstanceId}\",
      \"AutoScalingGroupName\": \"${aws:AutoScalingGroupName}\"
    },
    \"metrics_collected\": {
      \"cpu\": {
        \"measurement\": [
          \"usage_idle\",
          \"usage_iowait\",
          \"usage_user\",
          \"usage_system\"
        ],
        \"metrics_collection_interval\": 60
      },
      \"mem\": {
        \"measurement\": [
          \"mem_used_percent\"
        ],
        \"metrics_collection_interval\": 60
      }
    }
  },
  \"logs\": {
    \"logs_collected\": {
      \"files\": {
        \"collect_list\": [
          {
            \"file_path\": \"/var/log/syslog\",
            \"log_group_name\": \"k8-node-log-group\",
            \"log_stream_name\": \"{instance_id}-syslog\",
            \"timestamp_format\": \"%b %d %H:%M:%S\"
          },
          {
            \"file_path\": \"/var/log/cloud-init.log\",
            \"log_group_name\": \"k8-node-log-group\",
            \"log_stream_name\": \"{instance_id}-cloud-init\",
            \"timestamp_format\": \"%Y-%m-%dT%H:%M:%S.%fZ\"
          }
        ]
      }
    }
  }
}
EOF

# Start CloudWatch Agent
/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a start -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json
' | base64 -w 0)"'",
        "BlockDeviceMappings": [
            {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                    "VolumeSize": 8,
                    "VolumeType": "gp2"
                }
            }
        ]
    }'




#####################
Launch Configuration
#####################
- Fewer features compared to Launch Templates
- No versioning support. You can only have one version of the Launch Configuration at a time
- Limited in terms of advanced instance options like Spot Instances, Elastic GPUs, and more flexible networking
  options
- Doesn't support setting things like Placement Groups, multiple instance types in Auto Scaling, or advanced EBS
  settings


aws autoscaling create-launch-configuration \
    --region eu-west-2 \
    --launch-configuration-name my-ubuntu-launch-config \
    --image-id ami-000b29500ea1d73a3 \
    --instance-type t2.micro \
    --security-groups sg-0eab8786c734218b1 \
    --user-data '#!/bin/bash
# Create a custom user
useradd -m -s /bin/bash kube_user

# Add the public SSH key
mkdir -p /home/kube_user/.ssh
echo "<your-ssh-public-key-here>" > /home/kube_user/.ssh/authorized_keys
chown -R kube_user:kube_user /home/kube_user/.ssh
chmod 700 /home/kube_user/.ssh
chmod 600 /home/kube_user/.ssh/authorized_keys

# Add user to sudoers
echo "kube_user ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers' \
    --block-device-mappings "DeviceName=/dev/sda1,Ebs={VolumeSize=8,VolumeType=gpt2}"
