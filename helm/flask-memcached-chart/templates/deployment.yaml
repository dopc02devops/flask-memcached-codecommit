apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.metadata.name }}
  labels:
    app: flask-app
spec:
  replicas: {{ .Values.deployment.spec.replicas.count }}
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
        - name: {{ .Values.deployment.spec.container.name }}
          image: {{ .Values.deployment.spec.container.image }}
          ports:
            - containerPort: {{ .Values.deployment.spec.container.port }}
          envFrom:
            - configMapRef:
                name: {{ .Values.config.metadata.env.name }}
            - configMapRef:
                name: {{ .Values.config.metadata.resource.name }}
          resources:
            requests:
              memory: "64Mi"  # Reduced from 128Mi to 64Mi
              cpu: "125m"     # Reduced from 250m to 125m
            limits:
              memory: "128Mi" # Reduced from 256Mi to 128Mi
              cpu: "250m"     # Reduced from 500m to 250m
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.deployment.spec.container.readinessProbe.port }}
            initialDelaySeconds: {{ .Values.deployment.spec.container.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.spec.container.readinessProbe.periodSeconds }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.deployment.spec.container.livenessProbe.port }}
            initialDelaySeconds: {{ .Values.deployment.spec.container.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.spec.container.livenessProbe.periodSeconds }}
          volumeMounts:
            - name: {{ .Values.deployment.spec.container.volume.name }}
              mountPath: /app/data
      volumes:
        - name: {{ .Values.deployment.spec.container.volume.name }}
          persistentVolumeClaim:
            claimName: {{ .Values.deployment.spec.container.volume.claim.name }}
          # nfs:
          #   server: "nfs-service.storage.svc.cluster.local"
          #   path: "/nfs-direct" # "nfs-direct" folder must exist inside "/exports" directory of NFS server
            # Here, we have mounted /exports/nfs-direct directory of NFS server into /app/data directory. Now, 
            # if we write anything in /demo/data directory of this pod, it will be written on /exports/nfs-direct 
            # directory of the NFS server.
      terminationGracePeriodSeconds: {{ .Values.deployment.spec.container.terminationGracePeriodSeconds.count }}
  strategy:
    type: {{ .Values.deployment.spec.strategy.type }}
    rollingUpdate:
      maxSurge: {{ .Values.deployment.spec.strategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.deployment.spec.strategy.rollingUpdate.maxUnavailable }}

