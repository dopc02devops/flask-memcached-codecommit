# Enable persistence using a PVC (Persistent Volume Claim)
persistence:
  enabled: true
  existingClaim: ""  # Leave blank to let Kubernetes create the PVC dynamically
  storageClass: "nfs"  # The StorageClass you want to use (ensure this matches the dynamic provisioning StorageClass)
  accessMode: ReadWriteMany  # Access mode for multi-node support
  size: 10Gi  # PVC size (adjust as needed)

# Image configuration for the NFS provisioner
image:
  repository: registry.k8s.io/sig-storage/nfs-provisioner
  tag: v4.0.8
  pullPolicy: IfNotPresent

# Service configuration for NFS provisioner
service:
  type: ClusterIP  # For internal access, use ClusterIP; for external access, use LoadBalancer
  nfsPort: 2049  # The NFS service port
  mountdPort: 20048  # The mountd service port
  rpcbindPort: 111  # The rpcbind service port
  nfsNodePort: nil  # Optional: Use only if service.type is NodePort
  mountdNodePort: nil  # Optional: Use only if service.type is NodePort
  rpcbindNodePort: nil  # Optional: Use only if service.type is NodePort

# StorageClass configuration for dynamic provisioning
storageClass:
  create: true  # Ensure StorageClass is created for dynamic provisioning
  provisionerName: cluster.local/my-release-nfs-server-provisioner  # Use the provisioner for NFS dynamic provisioning
  name: nfs  # The name of the StorageClass
  allowVolumeExpansion: true  # Allow PVC resizing
  mountOptions: ["vers=3"]  # Mount options for the NFS server
  reclaimPolicy: Delete  # The reclaim policy for the volume when the PVC is deleted (can also be Retain)

# Export configuration for NFS server (enabling access from all clients)
nfs:
  server:
    export:
      - path: /export  # The export directory on the NFS server
        options: "*(rw,sync,no_subtree_check,no_root_squash)"  # Permissions for clients accessing the NFS share

# Resource configuration for the NFS provisioner
resources: {}

# Pod scheduling configuration (optional)
nodeSelector: {}  # Optional: Set labels to target specific nodes
tolerations: []  # Optional: Set tolerations to allow scheduling on tainted nodes
affinity: {}  # Optional: Define affinity rules for pod placement

# Security context for the NFS provisioner pod (optional)
podSecurityContext: {}

# PriorityClass configuration for the NFS provisioner pods (optional)
priorityClass:
  create: false
  name: ""
  value: 5
